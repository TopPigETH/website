/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SeederInterface extends ethers.utils.Interface {
  functions: {
    "generateSeed(uint256,address,bool,uint48)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "generateSeed",
    values: [BigNumberish, string, boolean, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "generateSeed",
    data: BytesLike
  ): Result;

  events: {};
}

export class Seeder extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SeederInterface;

  functions: {
    generateSeed(
      wizardId: BigNumberish,
      descriptor: string,
      isOneOfOne: boolean,
      oneOfOneIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          boolean,
          number
        ] & {
          background: number;
          skin: number;
          clothes: number;
          eyes: number;
          mouth: number;
          accessory: number;
          bgItem: number;
          hat: number;
          oneOfOne: boolean;
          oneOfOneIndex: number;
        }
      ]
    >;

    "generateSeed(uint256,address,bool,uint48)"(
      wizardId: BigNumberish,
      descriptor: string,
      isOneOfOne: boolean,
      oneOfOneIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          boolean,
          number
        ] & {
          background: number;
          skin: number;
          clothes: number;
          eyes: number;
          mouth: number;
          accessory: number;
          bgItem: number;
          hat: number;
          oneOfOne: boolean;
          oneOfOneIndex: number;
        }
      ]
    >;
  };

  generateSeed(
    wizardId: BigNumberish,
    descriptor: string,
    isOneOfOne: boolean,
    oneOfOneIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      boolean,
      number
    ] & {
      background: number;
      skin: number;
      clothes: number;
      eyes: number;
      mouth: number;
      accessory: number;
      bgItem: number;
      hat: number;
      oneOfOne: boolean;
      oneOfOneIndex: number;
    }
  >;

  "generateSeed(uint256,address,bool,uint48)"(
    wizardId: BigNumberish,
    descriptor: string,
    isOneOfOne: boolean,
    oneOfOneIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      boolean,
      number
    ] & {
      background: number;
      skin: number;
      clothes: number;
      eyes: number;
      mouth: number;
      accessory: number;
      bgItem: number;
      hat: number;
      oneOfOne: boolean;
      oneOfOneIndex: number;
    }
  >;

  callStatic: {
    generateSeed(
      wizardId: BigNumberish,
      descriptor: string,
      isOneOfOne: boolean,
      oneOfOneIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        boolean,
        number
      ] & {
        background: number;
        skin: number;
        clothes: number;
        eyes: number;
        mouth: number;
        accessory: number;
        bgItem: number;
        hat: number;
        oneOfOne: boolean;
        oneOfOneIndex: number;
      }
    >;

    "generateSeed(uint256,address,bool,uint48)"(
      wizardId: BigNumberish,
      descriptor: string,
      isOneOfOne: boolean,
      oneOfOneIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        boolean,
        number
      ] & {
        background: number;
        skin: number;
        clothes: number;
        eyes: number;
        mouth: number;
        accessory: number;
        bgItem: number;
        hat: number;
        oneOfOne: boolean;
        oneOfOneIndex: number;
      }
    >;
  };

  filters: {};

  estimateGas: {
    generateSeed(
      wizardId: BigNumberish,
      descriptor: string,
      isOneOfOne: boolean,
      oneOfOneIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "generateSeed(uint256,address,bool,uint48)"(
      wizardId: BigNumberish,
      descriptor: string,
      isOneOfOne: boolean,
      oneOfOneIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    generateSeed(
      wizardId: BigNumberish,
      descriptor: string,
      isOneOfOne: boolean,
      oneOfOneIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "generateSeed(uint256,address,bool,uint48)"(
      wizardId: BigNumberish,
      descriptor: string,
      isOneOfOne: boolean,
      oneOfOneIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
