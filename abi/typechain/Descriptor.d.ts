/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DescriptorInterface extends ethers.utils.Interface {
  functions: {
    "accessory(uint256)": FunctionFragment;
    "accessoryCount()": FunctionFragment;
    "addAccessory(bytes)": FunctionFragment;
    "addBackground(string)": FunctionFragment;
    "addBgItem(bytes)": FunctionFragment;
    "addClothes(bytes)": FunctionFragment;
    "addColorToPalette(uint8,string)": FunctionFragment;
    "addEyes(bytes)": FunctionFragment;
    "addHat(bytes)": FunctionFragment;
    "addManyAccessories(bytes[])": FunctionFragment;
    "addManyBackgrounds(string[])": FunctionFragment;
    "addManyBgItems(bytes[])": FunctionFragment;
    "addManyClothes(bytes[])": FunctionFragment;
    "addManyColorsToPalette(uint8,string[])": FunctionFragment;
    "addManyEyes(bytes[])": FunctionFragment;
    "addManyHats(bytes[])": FunctionFragment;
    "addManyMouths(bytes[])": FunctionFragment;
    "addManyOneOfOnes(bytes[])": FunctionFragment;
    "addManySkins(bytes[])": FunctionFragment;
    "addMouth(bytes)": FunctionFragment;
    "addOneOfOne(bytes)": FunctionFragment;
    "addSkin(bytes)": FunctionFragment;
    "arePartsLocked()": FunctionFragment;
    "backgroundCount()": FunctionFragment;
    "backgrounds(uint256)": FunctionFragment;
    "baseURI()": FunctionFragment;
    "bgItems(uint256)": FunctionFragment;
    "bgItemsCount()": FunctionFragment;
    "clothes(uint256)": FunctionFragment;
    "clothesCount()": FunctionFragment;
    "dataURI(uint256,tuple)": FunctionFragment;
    "eyes(uint256)": FunctionFragment;
    "eyesCount()": FunctionFragment;
    "generateSVGImage(tuple)": FunctionFragment;
    "genericDataURI(string,string,tuple)": FunctionFragment;
    "hats(uint256)": FunctionFragment;
    "hatsCount()": FunctionFragment;
    "isDataURIEnabled()": FunctionFragment;
    "lastOneOfOneCount()": FunctionFragment;
    "lockParts()": FunctionFragment;
    "mouths(uint256)": FunctionFragment;
    "mouthsCount()": FunctionFragment;
    "oneOfOnes(uint256)": FunctionFragment;
    "oneOfOnesCount()": FunctionFragment;
    "owner()": FunctionFragment;
    "palettes(uint8,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "replacePalette(uint8,string[])": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "skins(uint256)": FunctionFragment;
    "skinsCount()": FunctionFragment;
    "toggleDataURIEnabled()": FunctionFragment;
    "tokenURI(uint256,tuple)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accessory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "accessoryCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAccessory",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addBackground",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addBgItem",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addClothes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addColorToPalette",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "addEyes", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "addHat", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "addManyAccessories",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyBackgrounds",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyBgItems",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyClothes",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyColorsToPalette",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyEyes",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyHats",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyMouths",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyOneOfOnes",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManySkins",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "addMouth", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "addOneOfOne",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "addSkin", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "arePartsLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "backgroundCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "backgrounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bgItems",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bgItemsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "clothes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clothesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dataURI",
    values: [
      BigNumberish,
      {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "eyes", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "eyesCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "generateSVGImage",
    values: [
      {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "genericDataURI",
    values: [
      string,
      string,
      {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "hats", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "hatsCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isDataURIEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastOneOfOneCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lockParts", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mouths",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mouthsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oneOfOnes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "oneOfOnesCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "palettes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "replacePalette",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(functionFragment: "skins", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "skinsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleDataURIEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [
      BigNumberish,
      {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "accessory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accessoryCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAccessory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBackground",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addBgItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addClothes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addColorToPalette",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addEyes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addHat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addManyAccessories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyBackgrounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyBgItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyClothes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyColorsToPalette",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyEyes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyHats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyMouths",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyOneOfOnes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManySkins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addMouth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addOneOfOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSkin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "arePartsLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "backgroundCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "backgrounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bgItems", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bgItemsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clothes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clothesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eyes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eyesCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateSVGImage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genericDataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hats", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hatsCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDataURIEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastOneOfOneCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockParts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mouths", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mouthsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oneOfOnes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oneOfOnesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "palettes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replacePalette",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "skins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "skinsCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleDataURIEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "BaseURIUpdated(string)": EventFragment;
    "DataURIToggled(bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PartsLocked()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BaseURIUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DataURIToggled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartsLocked"): EventFragment;
}

export class Descriptor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DescriptorInterface;

  functions: {
    accessory(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "accessory(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    accessoryCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "accessoryCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addAccessory(
      _accessory: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addAccessory(bytes)"(
      _accessory: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addBackground(
      _background: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addBackground(string)"(
      _background: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addBgItem(
      _bgItem: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addBgItem(bytes)"(
      _bgItem: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addClothes(
      _clothes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addClothes(bytes)"(
      _clothes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addColorToPalette(
      _paletteIndex: BigNumberish,
      _color: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addColorToPalette(uint8,string)"(
      _paletteIndex: BigNumberish,
      _color: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addEyes(
      _eyes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addEyes(bytes)"(
      _eyes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addHat(
      _hat: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addHat(bytes)"(
      _hat: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addManyAccessories(
      _accessory: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addManyAccessories(bytes[])"(
      _accessory: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addManyBackgrounds(
      _backgrounds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addManyBackgrounds(string[])"(
      _backgrounds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addManyBgItems(
      _bgItems: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addManyBgItems(bytes[])"(
      _bgItems: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addManyClothes(
      _clothes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addManyClothes(bytes[])"(
      _clothes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addManyColorsToPalette(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addManyColorsToPalette(uint8,string[])"(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addManyEyes(
      _eyes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addManyEyes(bytes[])"(
      _eyes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addManyHats(
      _hats: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addManyHats(bytes[])"(
      _hats: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addManyMouths(
      _mouths: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addManyMouths(bytes[])"(
      _mouths: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addManyOneOfOnes(
      _oneOfOnes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addManyOneOfOnes(bytes[])"(
      _oneOfOnes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addManySkins(
      _skins: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addManySkins(bytes[])"(
      _skins: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addMouth(
      _mouth: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addMouth(bytes)"(
      _mouth: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addOneOfOne(
      _oneOfOne: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addOneOfOne(bytes)"(
      _oneOfOne: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSkin(
      _skin: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addSkin(bytes)"(
      _skin: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    arePartsLocked(overrides?: CallOverrides): Promise<[boolean]>;

    "arePartsLocked()"(overrides?: CallOverrides): Promise<[boolean]>;

    backgroundCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "backgroundCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    backgrounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "backgrounds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    "baseURI()"(overrides?: CallOverrides): Promise<[string]>;

    bgItems(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "bgItems(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    bgItemsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "bgItemsCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    clothes(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "clothes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    clothesCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "clothesCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    dataURI(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    "dataURI(uint256,(uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,bool,uint48))"(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    eyes(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "eyes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    eyesCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "eyesCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    generateSVGImage(
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    "generateSVGImage((uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,bool,uint48))"(
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    genericDataURI(
      name: string,
      description: string,
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    "genericDataURI(string,string,(uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,bool,uint48))"(
      name: string,
      description: string,
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    hats(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "hats(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hatsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "hatsCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    isDataURIEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    "isDataURIEnabled()"(overrides?: CallOverrides): Promise<[boolean]>;

    lastOneOfOneCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastOneOfOneCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockParts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockParts()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mouths(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "mouths(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    mouthsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "mouthsCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    oneOfOnes(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "oneOfOnes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    oneOfOnesCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "oneOfOnesCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    palettes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "palettes(uint8,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    replacePalette(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "replacePalette(uint8,string[])"(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBaseURI(string)"(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    skins(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "skins(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    skinsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "skinsCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    toggleDataURIEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "toggleDataURIEnabled()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tokenURI(uint256,(uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,bool,uint48))"(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accessory(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "accessory(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  accessoryCount(overrides?: CallOverrides): Promise<BigNumber>;

  "accessoryCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  addAccessory(
    _accessory: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addAccessory(bytes)"(
    _accessory: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addBackground(
    _background: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addBackground(string)"(
    _background: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addBgItem(
    _bgItem: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addBgItem(bytes)"(
    _bgItem: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addClothes(
    _clothes: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addClothes(bytes)"(
    _clothes: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addColorToPalette(
    _paletteIndex: BigNumberish,
    _color: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addColorToPalette(uint8,string)"(
    _paletteIndex: BigNumberish,
    _color: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addEyes(
    _eyes: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addEyes(bytes)"(
    _eyes: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addHat(
    _hat: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addHat(bytes)"(
    _hat: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addManyAccessories(
    _accessory: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addManyAccessories(bytes[])"(
    _accessory: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addManyBackgrounds(
    _backgrounds: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addManyBackgrounds(string[])"(
    _backgrounds: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addManyBgItems(
    _bgItems: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addManyBgItems(bytes[])"(
    _bgItems: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addManyClothes(
    _clothes: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addManyClothes(bytes[])"(
    _clothes: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addManyColorsToPalette(
    paletteIndex: BigNumberish,
    newColors: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addManyColorsToPalette(uint8,string[])"(
    paletteIndex: BigNumberish,
    newColors: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addManyEyes(
    _eyes: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addManyEyes(bytes[])"(
    _eyes: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addManyHats(
    _hats: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addManyHats(bytes[])"(
    _hats: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addManyMouths(
    _mouths: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addManyMouths(bytes[])"(
    _mouths: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addManyOneOfOnes(
    _oneOfOnes: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addManyOneOfOnes(bytes[])"(
    _oneOfOnes: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addManySkins(
    _skins: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addManySkins(bytes[])"(
    _skins: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addMouth(
    _mouth: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addMouth(bytes)"(
    _mouth: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addOneOfOne(
    _oneOfOne: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addOneOfOne(bytes)"(
    _oneOfOne: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSkin(
    _skin: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addSkin(bytes)"(
    _skin: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  arePartsLocked(overrides?: CallOverrides): Promise<boolean>;

  "arePartsLocked()"(overrides?: CallOverrides): Promise<boolean>;

  backgroundCount(overrides?: CallOverrides): Promise<BigNumber>;

  "backgroundCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  backgrounds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "backgrounds(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  "baseURI()"(overrides?: CallOverrides): Promise<string>;

  bgItems(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "bgItems(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  bgItemsCount(overrides?: CallOverrides): Promise<BigNumber>;

  "bgItemsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  clothes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "clothes(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  clothesCount(overrides?: CallOverrides): Promise<BigNumber>;

  "clothesCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  dataURI(
    tokenId: BigNumberish,
    seed: {
      background: BigNumberish;
      skin: BigNumberish;
      clothes: BigNumberish;
      eyes: BigNumberish;
      mouth: BigNumberish;
      accessory: BigNumberish;
      bgItem: BigNumberish;
      hat: BigNumberish;
      oneOfOne: boolean;
      oneOfOneIndex: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "dataURI(uint256,(uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,bool,uint48))"(
    tokenId: BigNumberish,
    seed: {
      background: BigNumberish;
      skin: BigNumberish;
      clothes: BigNumberish;
      eyes: BigNumberish;
      mouth: BigNumberish;
      accessory: BigNumberish;
      bgItem: BigNumberish;
      hat: BigNumberish;
      oneOfOne: boolean;
      oneOfOneIndex: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  eyes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "eyes(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  eyesCount(overrides?: CallOverrides): Promise<BigNumber>;

  "eyesCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  generateSVGImage(
    seed: {
      background: BigNumberish;
      skin: BigNumberish;
      clothes: BigNumberish;
      eyes: BigNumberish;
      mouth: BigNumberish;
      accessory: BigNumberish;
      bgItem: BigNumberish;
      hat: BigNumberish;
      oneOfOne: boolean;
      oneOfOneIndex: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "generateSVGImage((uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,bool,uint48))"(
    seed: {
      background: BigNumberish;
      skin: BigNumberish;
      clothes: BigNumberish;
      eyes: BigNumberish;
      mouth: BigNumberish;
      accessory: BigNumberish;
      bgItem: BigNumberish;
      hat: BigNumberish;
      oneOfOne: boolean;
      oneOfOneIndex: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  genericDataURI(
    name: string,
    description: string,
    seed: {
      background: BigNumberish;
      skin: BigNumberish;
      clothes: BigNumberish;
      eyes: BigNumberish;
      mouth: BigNumberish;
      accessory: BigNumberish;
      bgItem: BigNumberish;
      hat: BigNumberish;
      oneOfOne: boolean;
      oneOfOneIndex: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "genericDataURI(string,string,(uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,bool,uint48))"(
    name: string,
    description: string,
    seed: {
      background: BigNumberish;
      skin: BigNumberish;
      clothes: BigNumberish;
      eyes: BigNumberish;
      mouth: BigNumberish;
      accessory: BigNumberish;
      bgItem: BigNumberish;
      hat: BigNumberish;
      oneOfOne: boolean;
      oneOfOneIndex: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  hats(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "hats(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  hatsCount(overrides?: CallOverrides): Promise<BigNumber>;

  "hatsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  isDataURIEnabled(overrides?: CallOverrides): Promise<boolean>;

  "isDataURIEnabled()"(overrides?: CallOverrides): Promise<boolean>;

  lastOneOfOneCount(overrides?: CallOverrides): Promise<BigNumber>;

  "lastOneOfOneCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  lockParts(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockParts()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mouths(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "mouths(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  mouthsCount(overrides?: CallOverrides): Promise<BigNumber>;

  "mouthsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  oneOfOnes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "oneOfOnes(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  oneOfOnesCount(overrides?: CallOverrides): Promise<BigNumber>;

  "oneOfOnesCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  palettes(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "palettes(uint8,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  replacePalette(
    paletteIndex: BigNumberish,
    newColors: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "replacePalette(uint8,string[])"(
    paletteIndex: BigNumberish,
    newColors: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    _baseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBaseURI(string)"(
    _baseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  skins(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "skins(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  skinsCount(overrides?: CallOverrides): Promise<BigNumber>;

  "skinsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  toggleDataURIEnabled(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "toggleDataURIEnabled()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenURI(
    tokenId: BigNumberish,
    seed: {
      background: BigNumberish;
      skin: BigNumberish;
      clothes: BigNumberish;
      eyes: BigNumberish;
      mouth: BigNumberish;
      accessory: BigNumberish;
      bgItem: BigNumberish;
      hat: BigNumberish;
      oneOfOne: boolean;
      oneOfOneIndex: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "tokenURI(uint256,(uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,bool,uint48))"(
    tokenId: BigNumberish,
    seed: {
      background: BigNumberish;
      skin: BigNumberish;
      clothes: BigNumberish;
      eyes: BigNumberish;
      mouth: BigNumberish;
      accessory: BigNumberish;
      bgItem: BigNumberish;
      hat: BigNumberish;
      oneOfOne: boolean;
      oneOfOneIndex: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accessory(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "accessory(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    accessoryCount(overrides?: CallOverrides): Promise<BigNumber>;

    "accessoryCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    addAccessory(
      _accessory: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "addAccessory(bytes)"(
      _accessory: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addBackground(
      _background: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addBackground(string)"(
      _background: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addBgItem(_bgItem: BytesLike, overrides?: CallOverrides): Promise<void>;

    "addBgItem(bytes)"(
      _bgItem: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addClothes(_clothes: BytesLike, overrides?: CallOverrides): Promise<void>;

    "addClothes(bytes)"(
      _clothes: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addColorToPalette(
      _paletteIndex: BigNumberish,
      _color: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addColorToPalette(uint8,string)"(
      _paletteIndex: BigNumberish,
      _color: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addEyes(_eyes: BytesLike, overrides?: CallOverrides): Promise<void>;

    "addEyes(bytes)"(
      _eyes: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addHat(_hat: BytesLike, overrides?: CallOverrides): Promise<void>;

    "addHat(bytes)"(_hat: BytesLike, overrides?: CallOverrides): Promise<void>;

    addManyAccessories(
      _accessory: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addManyAccessories(bytes[])"(
      _accessory: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyBackgrounds(
      _backgrounds: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addManyBackgrounds(string[])"(
      _backgrounds: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyBgItems(
      _bgItems: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addManyBgItems(bytes[])"(
      _bgItems: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyClothes(
      _clothes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addManyClothes(bytes[])"(
      _clothes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyColorsToPalette(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addManyColorsToPalette(uint8,string[])"(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyEyes(_eyes: BytesLike[], overrides?: CallOverrides): Promise<void>;

    "addManyEyes(bytes[])"(
      _eyes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyHats(_hats: BytesLike[], overrides?: CallOverrides): Promise<void>;

    "addManyHats(bytes[])"(
      _hats: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyMouths(
      _mouths: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addManyMouths(bytes[])"(
      _mouths: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyOneOfOnes(
      _oneOfOnes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addManyOneOfOnes(bytes[])"(
      _oneOfOnes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManySkins(_skins: BytesLike[], overrides?: CallOverrides): Promise<void>;

    "addManySkins(bytes[])"(
      _skins: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    addMouth(_mouth: BytesLike, overrides?: CallOverrides): Promise<void>;

    "addMouth(bytes)"(
      _mouth: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addOneOfOne(_oneOfOne: BytesLike, overrides?: CallOverrides): Promise<void>;

    "addOneOfOne(bytes)"(
      _oneOfOne: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addSkin(_skin: BytesLike, overrides?: CallOverrides): Promise<void>;

    "addSkin(bytes)"(
      _skin: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    arePartsLocked(overrides?: CallOverrides): Promise<boolean>;

    "arePartsLocked()"(overrides?: CallOverrides): Promise<boolean>;

    backgroundCount(overrides?: CallOverrides): Promise<BigNumber>;

    "backgroundCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    backgrounds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "backgrounds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    "baseURI()"(overrides?: CallOverrides): Promise<string>;

    bgItems(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "bgItems(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    bgItemsCount(overrides?: CallOverrides): Promise<BigNumber>;

    "bgItemsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    clothes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "clothes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    clothesCount(overrides?: CallOverrides): Promise<BigNumber>;

    "clothesCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    dataURI(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "dataURI(uint256,(uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,bool,uint48))"(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    eyes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "eyes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    eyesCount(overrides?: CallOverrides): Promise<BigNumber>;

    "eyesCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    generateSVGImage(
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "generateSVGImage((uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,bool,uint48))"(
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    genericDataURI(
      name: string,
      description: string,
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "genericDataURI(string,string,(uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,bool,uint48))"(
      name: string,
      description: string,
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    hats(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "hats(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    hatsCount(overrides?: CallOverrides): Promise<BigNumber>;

    "hatsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    isDataURIEnabled(overrides?: CallOverrides): Promise<boolean>;

    "isDataURIEnabled()"(overrides?: CallOverrides): Promise<boolean>;

    lastOneOfOneCount(overrides?: CallOverrides): Promise<BigNumber>;

    "lastOneOfOneCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockParts(overrides?: CallOverrides): Promise<void>;

    "lockParts()"(overrides?: CallOverrides): Promise<void>;

    mouths(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "mouths(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    mouthsCount(overrides?: CallOverrides): Promise<BigNumber>;

    "mouthsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    oneOfOnes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "oneOfOnes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    oneOfOnesCount(overrides?: CallOverrides): Promise<BigNumber>;

    "oneOfOnesCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    palettes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "palettes(uint8,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    replacePalette(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "replacePalette(uint8,string[])"(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(_baseURI: string, overrides?: CallOverrides): Promise<void>;

    "setBaseURI(string)"(
      _baseURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    skins(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "skins(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    skinsCount(overrides?: CallOverrides): Promise<BigNumber>;

    "skinsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    toggleDataURIEnabled(overrides?: CallOverrides): Promise<void>;

    "toggleDataURIEnabled()"(overrides?: CallOverrides): Promise<void>;

    tokenURI(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "tokenURI(uint256,(uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,bool,uint48))"(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    BaseURIUpdated(
      baseURI: null
    ): TypedEventFilter<[string], { baseURI: string }>;

    DataURIToggled(
      enabled: null
    ): TypedEventFilter<[boolean], { enabled: boolean }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    PartsLocked(): TypedEventFilter<[], {}>;
  };

  estimateGas: {
    accessory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "accessory(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accessoryCount(overrides?: CallOverrides): Promise<BigNumber>;

    "accessoryCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    addAccessory(
      _accessory: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addAccessory(bytes)"(
      _accessory: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addBackground(
      _background: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addBackground(string)"(
      _background: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addBgItem(
      _bgItem: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addBgItem(bytes)"(
      _bgItem: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addClothes(
      _clothes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addClothes(bytes)"(
      _clothes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addColorToPalette(
      _paletteIndex: BigNumberish,
      _color: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addColorToPalette(uint8,string)"(
      _paletteIndex: BigNumberish,
      _color: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addEyes(
      _eyes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addEyes(bytes)"(
      _eyes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addHat(
      _hat: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addHat(bytes)"(
      _hat: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addManyAccessories(
      _accessory: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addManyAccessories(bytes[])"(
      _accessory: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addManyBackgrounds(
      _backgrounds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addManyBackgrounds(string[])"(
      _backgrounds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addManyBgItems(
      _bgItems: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addManyBgItems(bytes[])"(
      _bgItems: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addManyClothes(
      _clothes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addManyClothes(bytes[])"(
      _clothes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addManyColorsToPalette(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addManyColorsToPalette(uint8,string[])"(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addManyEyes(
      _eyes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addManyEyes(bytes[])"(
      _eyes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addManyHats(
      _hats: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addManyHats(bytes[])"(
      _hats: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addManyMouths(
      _mouths: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addManyMouths(bytes[])"(
      _mouths: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addManyOneOfOnes(
      _oneOfOnes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addManyOneOfOnes(bytes[])"(
      _oneOfOnes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addManySkins(
      _skins: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addManySkins(bytes[])"(
      _skins: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addMouth(
      _mouth: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addMouth(bytes)"(
      _mouth: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addOneOfOne(
      _oneOfOne: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addOneOfOne(bytes)"(
      _oneOfOne: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSkin(
      _skin: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addSkin(bytes)"(
      _skin: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    arePartsLocked(overrides?: CallOverrides): Promise<BigNumber>;

    "arePartsLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

    backgroundCount(overrides?: CallOverrides): Promise<BigNumber>;

    "backgroundCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    backgrounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "backgrounds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    "baseURI()"(overrides?: CallOverrides): Promise<BigNumber>;

    bgItems(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "bgItems(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bgItemsCount(overrides?: CallOverrides): Promise<BigNumber>;

    "bgItemsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    clothes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "clothes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clothesCount(overrides?: CallOverrides): Promise<BigNumber>;

    "clothesCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    dataURI(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dataURI(uint256,(uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,bool,uint48))"(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eyes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "eyes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eyesCount(overrides?: CallOverrides): Promise<BigNumber>;

    "eyesCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    generateSVGImage(
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "generateSVGImage((uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,bool,uint48))"(
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    genericDataURI(
      name: string,
      description: string,
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "genericDataURI(string,string,(uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,bool,uint48))"(
      name: string,
      description: string,
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hats(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "hats(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hatsCount(overrides?: CallOverrides): Promise<BigNumber>;

    "hatsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    isDataURIEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    "isDataURIEnabled()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastOneOfOneCount(overrides?: CallOverrides): Promise<BigNumber>;

    "lastOneOfOneCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockParts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockParts()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mouths(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "mouths(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mouthsCount(overrides?: CallOverrides): Promise<BigNumber>;

    "mouthsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    oneOfOnes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "oneOfOnes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oneOfOnesCount(overrides?: CallOverrides): Promise<BigNumber>;

    "oneOfOnesCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    palettes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "palettes(uint8,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    replacePalette(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "replacePalette(uint8,string[])"(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBaseURI(string)"(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    skins(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "skins(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    skinsCount(overrides?: CallOverrides): Promise<BigNumber>;

    "skinsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    toggleDataURIEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "toggleDataURIEnabled()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256,(uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,bool,uint48))"(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accessory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accessory(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accessoryCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accessoryCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAccessory(
      _accessory: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addAccessory(bytes)"(
      _accessory: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addBackground(
      _background: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addBackground(string)"(
      _background: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addBgItem(
      _bgItem: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addBgItem(bytes)"(
      _bgItem: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addClothes(
      _clothes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addClothes(bytes)"(
      _clothes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addColorToPalette(
      _paletteIndex: BigNumberish,
      _color: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addColorToPalette(uint8,string)"(
      _paletteIndex: BigNumberish,
      _color: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addEyes(
      _eyes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addEyes(bytes)"(
      _eyes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addHat(
      _hat: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addHat(bytes)"(
      _hat: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addManyAccessories(
      _accessory: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addManyAccessories(bytes[])"(
      _accessory: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addManyBackgrounds(
      _backgrounds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addManyBackgrounds(string[])"(
      _backgrounds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addManyBgItems(
      _bgItems: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addManyBgItems(bytes[])"(
      _bgItems: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addManyClothes(
      _clothes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addManyClothes(bytes[])"(
      _clothes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addManyColorsToPalette(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addManyColorsToPalette(uint8,string[])"(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addManyEyes(
      _eyes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addManyEyes(bytes[])"(
      _eyes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addManyHats(
      _hats: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addManyHats(bytes[])"(
      _hats: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addManyMouths(
      _mouths: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addManyMouths(bytes[])"(
      _mouths: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addManyOneOfOnes(
      _oneOfOnes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addManyOneOfOnes(bytes[])"(
      _oneOfOnes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addManySkins(
      _skins: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addManySkins(bytes[])"(
      _skins: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addMouth(
      _mouth: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addMouth(bytes)"(
      _mouth: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addOneOfOne(
      _oneOfOne: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addOneOfOne(bytes)"(
      _oneOfOne: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSkin(
      _skin: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addSkin(bytes)"(
      _skin: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    arePartsLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "arePartsLocked()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    backgroundCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "backgroundCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    backgrounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "backgrounds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseURI()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bgItems(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bgItems(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bgItemsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bgItemsCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    clothes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "clothes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clothesCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "clothesCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dataURI(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dataURI(uint256,(uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,bool,uint48))"(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eyes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "eyes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eyesCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "eyesCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    generateSVGImage(
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "generateSVGImage((uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,bool,uint48))"(
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genericDataURI(
      name: string,
      description: string,
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "genericDataURI(string,string,(uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,bool,uint48))"(
      name: string,
      description: string,
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hats(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hats(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hatsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "hatsCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDataURIEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isDataURIEnabled()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastOneOfOneCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastOneOfOneCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockParts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockParts()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mouths(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mouths(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mouthsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mouthsCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oneOfOnes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "oneOfOnes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oneOfOnesCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oneOfOnesCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    palettes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "palettes(uint8,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    replacePalette(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "replacePalette(uint8,string[])"(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBaseURI(string)"(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    skins(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "skins(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    skinsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "skinsCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleDataURIEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "toggleDataURIEnabled()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256,(uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,bool,uint48))"(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        skin: BigNumberish;
        clothes: BigNumberish;
        eyes: BigNumberish;
        mouth: BigNumberish;
        accessory: BigNumberish;
        bgItem: BigNumberish;
        hat: BigNumberish;
        oneOfOne: boolean;
        oneOfOneIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
