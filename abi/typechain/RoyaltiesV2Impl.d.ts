/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RoyaltiesV2ImplInterface extends ethers.utils.Interface {
  functions: {
    "getRaribleV2Royalties(uint256)": FunctionFragment;
    "royalties(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getRaribleV2Royalties",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "royalties",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getRaribleV2Royalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "royalties", data: BytesLike): Result;

  events: {
    "RoyaltiesSet(uint256,tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoyaltiesSet"): EventFragment;
}

export class RoyaltiesV2Impl extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RoyaltiesV2ImplInterface;

  functions: {
    getRaribleV2Royalties(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { account: string; value: BigNumber })[]]
    >;

    "getRaribleV2Royalties(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { account: string; value: BigNumber })[]]
    >;

    royalties(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { account: string; value: BigNumber }>;

    "royalties(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { account: string; value: BigNumber }>;
  };

  getRaribleV2Royalties(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { account: string; value: BigNumber })[]>;

  "getRaribleV2Royalties(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { account: string; value: BigNumber })[]>;

  royalties(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { account: string; value: BigNumber }>;

  "royalties(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { account: string; value: BigNumber }>;

  callStatic: {
    getRaribleV2Royalties(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { account: string; value: BigNumber })[]>;

    "getRaribleV2Royalties(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { account: string; value: BigNumber })[]>;

    royalties(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { account: string; value: BigNumber }>;

    "royalties(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { account: string; value: BigNumber }>;
  };

  filters: {
    RoyaltiesSet(
      tokenId: null,
      royalties: null
    ): TypedEventFilter<
      [
        BigNumber,
        ([string, BigNumber] & { account: string; value: BigNumber })[]
      ],
      {
        tokenId: BigNumber;
        royalties: ([string, BigNumber] & {
          account: string;
          value: BigNumber;
        })[];
      }
    >;
  };

  estimateGas: {
    getRaribleV2Royalties(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRaribleV2Royalties(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    royalties(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "royalties(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getRaribleV2Royalties(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRaribleV2Royalties(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    royalties(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "royalties(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
